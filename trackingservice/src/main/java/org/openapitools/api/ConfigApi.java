/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0-beta).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Alert;
import org.openapitools.model.Service;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-29T10:39:40.023515100+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "Config", description = "Tracking service requires certain configuration information. This includes the list of services supported and types of anomalies for which notifications should be sent out. Configuration information is attached to a trip.")
public interface ConfigApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /config/_alerts : Get the list of alerts. Alerts are tagged to POIs
     * Fetch the list of alerts
     *
     * @return successful operation (status code 200)
     *         or Invalid search value (status code 400)
     */
    @Operation(
        operationId = "findAlerts",
        summary = "Get the list of alerts. Alerts are tagged to POIs",
        description = "Fetch the list of alerts",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Alert.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Alert.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid search value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/config/_alerts",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<Alert>> findAlerts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"alerts\" : [ { \"code\" : \"code\", \"title\" : \"title\" }, { \"code\" : \"code\", \"title\" : \"title\" } ] }, { \"alerts\" : [ { \"code\" : \"code\", \"title\" : \"title\" }, { \"code\" : \"code\", \"title\" : \"title\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<alert> <alerts> </alerts> </alert>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/_services : Get the list of services provided by ULBs. Service id is passed during trip creation.
     * Fetch the list of services offered
     *
     * @return successful operation (status code 200)
     *         or Invalid search value (status code 400)
     */
    @Operation(
        operationId = "findServices",
        summary = "Get the list of services provided by ULBs. Service id is passed during trip creation.",
        description = "Fetch the list of services offered",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Service.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Service.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid search value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/config/_services",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<Service>> findServices(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"alerts\" : [ { \"code\" : \"code\", \"ulbId\" : \"ulbId\", \"name\" : \"name\" }, { \"code\" : \"code\", \"ulbId\" : \"ulbId\", \"name\" : \"name\" } ] }, { \"alerts\" : [ { \"code\" : \"code\", \"ulbId\" : \"ulbId\", \"name\" : \"name\" }, { \"code\" : \"code\", \"ulbId\" : \"ulbId\", \"name\" : \"name\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<service> <alerts> </alerts> </service>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
